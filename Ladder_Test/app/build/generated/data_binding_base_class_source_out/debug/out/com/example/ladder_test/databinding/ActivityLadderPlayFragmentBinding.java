// Generated by view binder compiler. Do not edit!
package com.example.ladder_test.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ladder_test.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLadderPlayFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonDraw;

  @NonNull
  public final ImageView canvas;

  @NonNull
  public final Button oneDrawButton;

  @NonNull
  public final LinearLayout restartButton;

  private ActivityLadderPlayFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button buttonDraw, @NonNull ImageView canvas, @NonNull Button oneDrawButton,
      @NonNull LinearLayout restartButton) {
    this.rootView = rootView;
    this.buttonDraw = buttonDraw;
    this.canvas = canvas;
    this.oneDrawButton = oneDrawButton;
    this.restartButton = restartButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLadderPlayFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLadderPlayFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_ladder_play_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLadderPlayFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDraw;
      Button buttonDraw = ViewBindings.findChildViewById(rootView, id);
      if (buttonDraw == null) {
        break missingId;
      }

      id = R.id.canvas;
      ImageView canvas = ViewBindings.findChildViewById(rootView, id);
      if (canvas == null) {
        break missingId;
      }

      id = R.id.oneDrawButton;
      Button oneDrawButton = ViewBindings.findChildViewById(rootView, id);
      if (oneDrawButton == null) {
        break missingId;
      }

      id = R.id.restartButton;
      LinearLayout restartButton = ViewBindings.findChildViewById(rootView, id);
      if (restartButton == null) {
        break missingId;
      }

      return new ActivityLadderPlayFragmentBinding((ConstraintLayout) rootView, buttonDraw, canvas,
          oneDrawButton, restartButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
